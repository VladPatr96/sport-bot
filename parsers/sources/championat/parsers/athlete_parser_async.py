# athlete_parser_async.py

import sqlite3
import os
import yaml
import time
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin
import datetime # –î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def create_athletes_table_if_not_exists(cursor):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É 'athletes' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    –¢–µ–ø–µ—Ä—å 'tag_url' —è–≤–ª—è–µ—Ç—Å—è UNIQUE, –∞ 'url' - –Ω–µ—Ç.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='athletes'")
        if not cursor.fetchone():
            cursor.execute("""
                CREATE TABLE athletes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    url TEXT NOT NULL, -- –¢–µ–ø–µ—Ä—å –Ω–µ UNIQUE
                    team_id INTEGER,
                    external_id INTEGER,
                    tag_url TEXT UNIQUE, -- –¢–µ–ø–µ—Ä—å UNIQUE
                    tournament_id INTEGER,
                    type TEXT,
                    FOREIGN KEY (team_id) REFERENCES teams(id),
                    FOREIGN KEY (tournament_id) REFERENCES tournaments(id)
                )
            """)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'athletes' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ UNIQUE –±—ã–ª –Ω–∞ url)
            cursor.execute("PRAGMA table_info(athletes)")
            columns = [info['name'] for info in cursor.fetchall()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü 'type'
            if 'type' not in columns:
                cursor.execute("ALTER TABLE athletes ADD COLUMN type TEXT")
                print("‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'type' –≤ —Ç–∞–±–ª–∏—Ü—É 'athletes'.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ 'url'
            cursor.execute("PRAGMA index_list(athletes)")
            indexes = cursor.fetchall()
            url_unique_index_exists = False
            for idx in indexes:
                cursor.execute(f"PRAGMA index_info({idx['name']})")
                idx_info = cursor.fetchall()
                for col_info in idx_info:
                    if col_info['name'] == 'url' and idx['unique'] == 1:
                        url_unique_index_exists = True
                        break
                if url_unique_index_exists:
                    break
            
            if url_unique_index_exists:
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ 'url'. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –º–µ—à–∞–µ—Ç.")
                print("   (–ù–∞–ø—Ä–∏–º–µ—Ä: DROP INDEX IF EXISTS idx_athletes_url_unique;)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ 'tag_url'
            tag_url_unique_index_exists = False
            for idx in indexes:
                cursor.execute(f"PRAGMA index_info({idx['name']})")
                idx_info = cursor.fetchall()
                for col_info in idx_info:
                    if col_info['name'] == 'tag_url' and idx['unique'] == 1:
                        tag_url_unique_index_exists = True
                        break
                if tag_url_unique_index_exists:
                    break

            if not tag_url_unique_index_exists:
                cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_athletes_tag_url_unique ON athletes (tag_url)")
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ 'tag_url' –≤ —Ç–∞–±–ª–∏—Ü—É 'athletes'.")

            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'athletes' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã 'athletes': {e}")
        raise

def create_failed_attempts_table_if_not_exists(cursor):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É 'failed_parsing_attempts' –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞.
    """
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS failed_parsing_attempts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                entity_type TEXT NOT NULL,    -- 'tournament' –∏–ª–∏ 'team'
                entity_id INTEGER NOT NULL,   -- ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
                url TEXT NOT NULL,            -- URL, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                error_message TEXT,           -- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'failed_parsing_attempts' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∞.")
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã 'failed_parsing_attempts': {e}")
        raise

def log_failed_attempt(cursor, conn, entity_type, entity_id, url, error_message):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ç–∞–±–ª–∏—Ü—É 'failed_parsing_attempts'.
    """
    try:
        cursor.execute(
            "INSERT INTO failed_parsing_attempts (entity_type, entity_id, url, error_message) VALUES (?, ?, ?, ?)",
            (entity_type, entity_id, url, error_message)
        )
        conn.commit()
        print(f"    ‚ö†Ô∏è –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: {entity_type} ID {entity_id}, URL: {url}, –û—à–∏–±–∫–∞: {error_message[:100]}...")
    except sqlite3.Error as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤ –ë–î: {e}")

def insert_athlete(cursor, name, url, tag_url, tournament_id, team_id, athlete_type):
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞—Ç–ª–µ—Ç–∞ –≤ –ë–î –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ,
    –∏—Å–ø–æ–ª—å–∑—É—è tag_url –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
    """
    try:
        existing_id = None
        existing_name = None
        existing_url = None
        existing_tag_url_db = None

        # 1. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∞—Ç–ª–µ—Ç–∞ –ø–æ tag_url (–µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω)
        if tag_url:
            cursor.execute("SELECT id, name, url, tag_url FROM athletes WHERE tag_url = ?", (tag_url,))
            existing_data = cursor.fetchone()
            if existing_data:
                existing_id = existing_data['id']
                existing_name = existing_data['name']
                existing_url = existing_data['url']
                existing_tag_url_db = existing_data['tag_url']
                # print(f"    ‚ÑπÔ∏è –ê—Ç–ª–µ—Ç '{existing_name}' (ID: {existing_id}) –Ω–∞–π–¥–µ–Ω –ø–æ tag_url: {tag_url}.")

        # 2. –ï—Å–ª–∏ tag_url –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ò–õ–ò –∞—Ç–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ tag_url,
        #    –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ url (–∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π, –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
        if existing_id is None:
            cursor.execute("SELECT id, name, url, tag_url FROM athletes WHERE url = ?", (url,))
            existing_data_by_url = cursor.fetchone()
            if existing_data_by_url:
                existing_id = existing_data_by_url['id']
                existing_name = existing_data_by_url['name']
                existing_url = existing_data_by_url['url']
                existing_tag_url_db = existing_data_by_url['tag_url']
                # print(f"    ‚ÑπÔ∏è –ê—Ç–ª–µ—Ç '{existing_name}' (ID: {existing_id}) –Ω–∞–π–¥–µ–Ω –ø–æ url: {url}.")

        # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ UPDATE –∏–ª–∏ INSERT
        if existing_id:
            # –ê—Ç–ª–µ—Ç –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            update_needed = False
            if existing_name != name: update_needed = True
            if existing_url != url: update_needed = True # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            if tag_url and existing_tag_url_db != tag_url: update_needed = True # –û–±–Ω–æ–≤–ª—è–µ–º tag_url, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –∏–∑–≤–µ—Å—Ç–µ–Ω –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è

            if update_needed:
                # COALESCE(?, tag_url) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π tag_url, –µ—Å–ª–∏ –Ω–æ–≤—ã–π tag_url —Ä–∞–≤–µ–Ω NULL
                cursor.execute("UPDATE athletes SET name = ?, url = ?, tag_url = COALESCE(?, tag_url), tournament_id = ?, team_id = ?, type = ? WHERE id = ?",
                               (name, url, tag_url, tournament_id, team_id, athlete_type, existing_id))
                print(f"    üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∞—Ç–ª–µ—Ç '{existing_name}' (ID: {existing_id}). –ù–æ–≤—ã–π URL: {url}, –ù–æ–≤—ã–π tag_url: {tag_url}.")
            else:
                print(f"    ‚ÑπÔ∏è –ê—Ç–ª–µ—Ç '{name}' (ID: {existing_id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.")
            return existing_id
        else:
            # –ê—Ç–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute("INSERT INTO athletes (name, url, tag_url, tournament_id, team_id, type) VALUES (?, ?, ?, ?, ?, ?)",
                           (name, url, tag_url, tournament_id, team_id, athlete_type))
            print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞—Ç–ª–µ—Ç '{name}' (ID: {cursor.lastrowid}). URL: {url}, Tag_url: {tag_url}.")
            return cursor.lastrowid
    except sqlite3.IntegrityError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ç–ª–µ—Ç–∞ '{name}' (URL: {url}, Tag_url: {tag_url}): {e}.")
        return None
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ç–ª–µ—Ç–∞ '{name}': {e}")
        return None

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---

async def fetch_page_content_async(session, url, semaphore):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ URL —Å –ø–æ–º–æ—â—å—é aiohttp.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (html_content, error_message).
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'
    }
    async with semaphore:
        try:
            async with session.get(url, headers=headers, timeout=aiohttp.ClientTimeout(total=10)) as response:
                response.raise_for_status()
                return await response.text(), None # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        except aiohttp.ClientError as e:
            return None, str(e)
        except asyncio.TimeoutError:
            return None, "–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        except Exception as e:
            return None, str(e)

def parse_players_from_html(html_content, base_url, player_table_selector, player_link_selector):
    """
    –ü–∞—Ä—Å–∏—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (players_data, error_message).
    """
    if not html_content:
        return [], "HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç"

    soup = BeautifulSoup(html_content, 'html.parser')
    players_data = []

    try:
        player_table = soup.select_one(player_table_selector)
        if not player_table:
            return [], f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É '{player_table_selector}'."

        player_links = player_table.select(player_link_selector)
        
        if not player_links:
            return [], f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É '{player_link_selector}' –≤ —Ç–∞–±–ª–∏—Ü–µ."

        for link_element in player_links:
            athlete_name = link_element.get_text(strip=True)
            raw_athlete_url = link_element.get('href')

            if athlete_name and raw_athlete_url:
                athlete_url = urljoin(base_url, raw_athlete_url)
                players_data.append({
                    'name': athlete_name,
                    'url': athlete_url
                })
        return players_data, None
    except Exception as e:
        return [], f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML: {e}"

async def process_tournament_async(session, cursor, conn, tournament_row, parser_config, semaphore):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø, –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î.
    """
    tournament_id = tournament_row['id']
    tournament_name = tournament_row['name']
    tournament_url = tournament_row['tournaments_url']
    tournament_type = tournament_row['type']
    
    player_table_selector = parser_config.get('player_table_selector')
    player_link_selector = parser_config.get('player_link_selector')

    if not tournament_url:
        print(f"  ‚ö†Ô∏è URL –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ '{tournament_name}' (ID: {tournament_id}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞: '{tournament_name}' (ID: {tournament_id}, —Ç–∏–ø: {tournament_type}) ---")
    
    players_page_url = None
    if tournament_type == 'individual':
        players_page_url = tournament_url
        if '/grid/' in tournament_url:
            players_page_url = tournament_url.replace('/grid/', '/players/')
        elif not tournament_url.endswith('/players/'):
            if not tournament_url.endswith('/'):
                players_page_url += '/'
            players_page_url += 'players/'

        print(f"  ‚û°Ô∏è –ü–æ–ª—É—á–∞–µ–º HTML –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤: {players_page_url}")
        html_content, error_msg = await fetch_page_content_async(session, players_page_url, semaphore)
        
        if html_content:
            players_data, parse_error_msg = parse_players_from_html(
                html_content=html_content,
                base_url=players_page_url,
                player_table_selector=player_table_selector,
                player_link_selector=player_link_selector
            )
            if players_data:
                for player_data in players_data:
                    insert_athlete(
                        cursor=cursor,
                        name=player_data['name'],
                        url=player_data['url'],
                        tag_url=None, # tag_url –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –ø–∞—Ä—Å–µ—Ä–µ
                        tournament_id=tournament_id,
                        team_id=None,
                        athlete_type='individual'
                    )
                conn.commit()
                print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(players_data)} –∞—Ç–ª–µ—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ '{tournament_name}'.")
            else:
                log_failed_attempt(cursor, conn, 'tournament', tournament_id, players_page_url, f"–ü–∞—Ä—Å–∏–Ω–≥ HTML –Ω–µ —É–¥–∞–ª—Å—è: {parse_error_msg}")
        else:
            log_failed_attempt(cursor, conn, 'tournament', tournament_id, players_page_url, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {error_msg}")

    elif tournament_type == 'teams':
        cursor.execute("SELECT id, name, url FROM teams WHERE tournament_id = ?", (tournament_id,))
        db_teams_data = cursor.fetchall()
        
        if not db_teams_data:
            print(f"  ‚ö†Ô∏è –î–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ '{tournament_name}' (ID {tournament_id}) –Ω–µ—Ç –∫–æ–º–∞–Ω–¥. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        team_tasks = []
        for team_row in db_teams_data:
            team_id = team_row['id']
            team_name = team_row['name']
            team_url = team_row['url']
            
            if not team_url:
                print(f"  ‚ö†Ô∏è URL –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{team_name}' (ID {team_id}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                log_failed_attempt(cursor, conn, 'team', team_id, "URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", f"URL –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{team_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                continue
            
            players_page_url = team_url
            if '/result/' in team_url:
                players_page_url = team_url.replace('/result/', '/players/')
            else:
                if not team_url.endswith('/'):
                    players_page_url += '/'
                players_page_url += 'players/'

            team_tasks.append(
                process_team_players_async(
                    session=session,
                    cursor=cursor,
                    conn=conn,
                    players_page_url=players_page_url,
                    tournament_id=tournament_id,
                    team_id=team_id,
                    athlete_type='teams',
                    player_table_selector=player_table_selector,
                    player_link_selector=player_link_selector,
                    semaphore=semaphore
                )
            )
        
        if team_tasks:
            await asyncio.gather(*team_tasks)
            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞—Ç–ª–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ '{tournament_name}'.")

    else:
        print(f"  ‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ '{tournament_type}' –¥–ª—è ID {tournament_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
    
async def process_team_players_async(session, cursor, conn, players_page_url, tournament_id, team_id, athlete_type, player_table_selector, player_link_selector, semaphore):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
    """
    print(f"    ‚û°Ô∏è –ü–æ–ª—É—á–∞–µ–º HTML –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: {players_page_url}")
    html_content, error_msg = await fetch_page_content_async(session, players_page_url, semaphore)
    if html_content:
        players_data, parse_error_msg = parse_players_from_html(
            html_content=html_content,
            base_url=players_page_url,
            player_table_selector=player_table_selector,
            player_link_selector=player_link_selector
        )
        if players_data:
            for player_data in players_data:
                insert_athlete(
                    cursor=cursor,
                    name=player_data['name'],
                    url=player_data['url'],
                    tag_url=None, # tag_url –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –ø–∞—Ä—Å–µ—Ä–µ
                    tournament_id=tournament_id,
                    team_id=team_id,
                    athlete_type=athlete_type
                )
            conn.commit()
            print(f"    ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(players_data)} –∞—Ç–ª–µ—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ID {team_id}.")
        else:
            log_failed_attempt(cursor, conn, 'team', team_id, players_page_url, f"–ü–∞—Ä—Å–∏–Ω–≥ HTML –Ω–µ —É–¥–∞–ª—Å—è: {parse_error_msg}")
    else:
        log_failed_attempt(cursor, conn, 'team', team_id, players_page_url, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {error_msg}")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ç–ª–µ—Ç–æ–≤.
    """
    # --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
    config_path = os.path.join(os.path.dirname(os.getcwd()), 'sport-news-bot','parsers', 'sources','championat', 'config', 'sources_config.yml')
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = os.path.join(os.path.dirname(os.getcwd()), 'sport-news-bot', 'database', 'prosport.db')
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {config_path}")
        return

    parser_config = config['championat']['parser']
    player_table_selector = parser_config.get('player_table_selector')
    player_link_selector = parser_config.get('player_link_selector')
    
    if not all([player_table_selector, player_link_selector]):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ sources_config.yml. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–µ–Ω–∞ –∫–ª—é—á–µ–π.")
        return
    
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_athletes_table_if_not_exists(cursor)
        create_failed_attempts_table_if_not_exists(cursor)
        conn.commit()

        print("\n--- –ù–∞—á–∏–Ω–∞–µ–º –ê–°–ò–ù–•–†–û–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ç–ª–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–º—è –∏ URL) ---")
        
        cursor.execute("SELECT id, name, tournaments_url, type FROM tournaments")
        db_tournaments_data = cursor.fetchall()
        
        if not db_tournaments_data:
            print("–í —Ç–∞–±–ª–∏—Ü–µ 'tournaments' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ç–ª–µ—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return

        semaphore = asyncio.Semaphore(5) # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

        async with aiohttp.ClientSession() as session:
            tournament_tasks = []
            for tournament_row in db_tournaments_data:
                tournament_tasks.append(
                    process_tournament_async(session, cursor, conn, tournament_row, parser_config, semaphore)
                )
            
            await asyncio.gather(*tournament_tasks)

    except Exception as main_e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: {main_e}")
    finally:
        if conn:
            conn.close()
            print("\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    asyncio.run(main())
