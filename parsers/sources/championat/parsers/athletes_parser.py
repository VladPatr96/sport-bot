# athlete_parser.py

import sqlite3
import os
import yaml
import time
from urllib.parse import urlparse, urljoin

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException

def create_athletes_table_if_not_exists(cursor):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É 'athletes' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS athletes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                url TEXT NOT NULL UNIQUE,
                team_id INTEGER,
                external_id INTEGER,
                tag_url TEXT,
                tournament_id INTEGER,
                type TEXT,
                FOREIGN KEY (team_id) REFERENCES teams(id),
                FOREIGN KEY (tournament_id) REFERENCES tournaments(id)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'athletes' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∞.")
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã 'athletes': {e}")
        raise

def insert_athlete(cursor, name, url, tag_url, tournament_id, team_id, athlete_type):
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞—Ç–ª–µ—Ç–∞ –≤ –ë–î –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.
    """
    try:
        cursor.execute("SELECT id, name FROM athletes WHERE url = ?", (url,))
        existing_data = cursor.fetchone()

        if existing_data:
            existing_id = existing_data['id']
            existing_name = existing_data['name']
            
            cursor.execute("SELECT tag_url FROM athletes WHERE id = ?", (existing_id,))
            current_tag_url = cursor.fetchone()['tag_url']

            if current_tag_url != tag_url:
                cursor.execute("UPDATE athletes SET name = ?, tag_url = ?, tournament_id = ?, team_id = ?, type = ? WHERE id = ?",
                               (name, tag_url, tournament_id, team_id, athlete_type, existing_id))
                print(f"    üîÑ –û–±–Ω–æ–≤–ª–µ–Ω tag_url –¥–ª—è –∞—Ç–ª–µ—Ç–∞ '{existing_name}' (ID: {existing_id}).")
            else:
                print(f"    ‚ÑπÔ∏è –ê—Ç–ª–µ—Ç '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_id}). –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.")
            return existing_id
        else:
            cursor.execute("INSERT INTO athletes (name, url, tag_url, tournament_id, team_id, type) VALUES (?, ?, ?, ?, ?, ?)",
                           (name, url, tag_url, tournament_id, team_id, athlete_type))
            print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞—Ç–ª–µ—Ç '{name}' (ID: {cursor.lastrowid}).")
            return cursor.lastrowid
    except sqlite3.IntegrityError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ç–ª–µ—Ç–∞ '{name}': {e}.")
        return None
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ç–ª–µ—Ç–∞ '{name}': {e}")
        return None

def get_tag_url_for_athlete(driver, wait, athlete_url, tag_selector):
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç–ª–µ—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç tag_url.
    """
    try:
        driver.get(athlete_url)
        wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, tag_selector)))
        
        tag_link_element = driver.find_element(By.CSS_SELECTOR, tag_selector)
        raw_tag_href = tag_link_element.get_attribute("href")
        if raw_tag_href:
            return urljoin(driver.current_url, raw_tag_href)
        return None
    except (TimeoutException, NoSuchElementException):
        print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–≥–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É '{tag_selector}' –¥–ª—è {athlete_url}.")
        return None
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ tag_url –¥–ª—è {athlete_url}: {e}")
        return None

def parse_players_from_page(driver, wait, cursor, conn, players_page_url, tournament_id, team_id, athlete_type, player_table_selector, player_link_selector, player_tag_selector):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –ë–î.
    """
    print(f"  ‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤: {players_page_url}")
    try:
        driver.get(players_page_url)
        wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, player_table_selector)))
        
        player_table = driver.find_element(By.CSS_SELECTOR, player_table_selector)
        player_link_elements = player_table.find_elements(By.CSS_SELECTOR, player_link_selector)
        
        if not player_link_elements:
            print("    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return

        print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(player_link_elements)} –∏–≥—Ä–æ–∫–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–∫–∞—Ö –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å StaleElementReferenceException
        player_data_list = []
        for link_element in player_link_elements:
            try:
                athlete_name = link_element.text.strip()
                if not athlete_name:
                    continue
                raw_athlete_url = link_element.get_attribute("href")
                athlete_url = urljoin(driver.current_url, raw_athlete_url)
                player_data_list.append({'name': athlete_name, 'url': athlete_url})
            except StaleElementReferenceException:
                # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è.
                # –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–ª—É—á–∞–∏.
                continue

        # –¢–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É, –∞ –Ω–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º DOM
        for player_data in player_data_list:
            athlete_name = player_data['name']
            athlete_url = player_data['url']

            print(f"      - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç–ª–µ—Ç–∞ '{athlete_name}' (URL: {athlete_url})")

            athlete_tag_url = get_tag_url_for_athlete(driver, wait, athlete_url, player_tag_selector)
            
            insert_athlete(
                cursor=cursor,
                name=athlete_name,
                url=athlete_url,
                tag_url=athlete_tag_url,
                tournament_id=tournament_id,
                team_id=team_id,
                athlete_type=athlete_type
            )
            
            conn.commit()
            time.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∞–π—Ç


    except (TimeoutException, NoSuchElementException):
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å –∏–≥—Ä–æ–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    except Exception as e:
        print(f"  ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤: {e}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ç–ª–µ—Ç–æ–≤.
    """

    # --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
    config_path = os.path.join(os.path.dirname(os.getcwd()), 'sport-news-bot','parsers', 'sources','championat', 'config', 'sources_config.yml')
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = os.path.join(os.path.dirname(os.getcwd()), 'sport-news-bot', 'database', 'prosport.db')

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {config_path}")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ç–ª–µ—Ç–æ–≤
    parser_config = config['championat']['parser']
    player_table_selector = parser_config.get('player_table_selector')
    player_link_selector = parser_config.get('player_link_selector')
    player_tag_selector = parser_config.get('player_tag_selector')

    if not all([player_table_selector, player_link_selector, player_tag_selector]):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ sources_config.yml. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–µ–Ω–∞ –∫–ª—é—á–µ–π.")
        return
    
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º try ---
    driver = None
    conn = None
    try:
        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver ---
        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument(f"user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36")
        chrome_options.add_argument("--ignore-certificate-errors")
        chrome_options.add_argument("--allow-insecure-localhost")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)

        driver = webdriver.Chrome(options=chrome_options)
        wait = WebDriverWait(driver, 15)

        # --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        create_athletes_table_if_not_exists(cursor)
        conn.commit()

        print("\n--- –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ç–ª–µ—Ç–æ–≤ ---")
        
        cursor.execute("SELECT id, tournaments_url, type FROM tournaments")
        db_tournaments_data = cursor.fetchall()
        
        if not db_tournaments_data:
            print("–í —Ç–∞–±–ª–∏—Ü–µ 'tournaments' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ç–ª–µ—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return

        for tournament_row in db_tournaments_data:
            tournament_id = tournament_row['id']
            tournament_url = tournament_row['tournaments_url']
            tournament_type = tournament_row['type']
            
            if not tournament_url:
                print(f"  ‚ö†Ô∏è URL –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ID {tournament_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ID {tournament_id} (—Ç–∏–ø: {tournament_type}) ---")
            
            if tournament_type == 'individual':
                players_page_url = tournament_url
                if '/grid/' in tournament_url:
                    players_page_url = tournament_url.replace('/grid/', '/players/')
                elif not tournament_url.endswith('/players/'):
                    if not tournament_url.endswith('/'):
                        players_page_url += '/'
                    players_page_url += 'players/'

                parse_players_from_page(
                    driver=driver,
                    wait=wait,
                    cursor=cursor,
                    conn=conn,
                    players_page_url=players_page_url,
                    tournament_id=tournament_id,
                    team_id=None,
                    athlete_type='individual',
                    player_table_selector=player_table_selector,
                    player_link_selector=player_link_selector,
                    player_tag_selector=player_tag_selector
                )

            elif tournament_type == 'teams':
                cursor.execute("SELECT id, name, url FROM teams WHERE tournament_id = ?", (tournament_id,))
                db_teams_data = cursor.fetchall()
                
                if not db_teams_data:
                    print(f"  ‚ö†Ô∏è –î–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ID {tournament_id} –Ω–µ—Ç –∫–æ–º–∞–Ω–¥. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                for team_row in db_teams_data:
                    team_id = team_row['id']
                    team_name = team_row['name']
                    team_url = team_row['url']
                    
                    if not team_url:
                        print(f"  ‚ö†Ô∏è URL –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{team_name}' (ID {team_id}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        continue
                    
                    players_page_url = team_url
                    if '/result/' in team_url:
                        players_page_url = team_url.replace('/result/', '/players/')
                    else:
                        if not team_url.endswith('/'):
                            players_page_url += '/'
                        players_page_url += 'players/'

                    print(f"\n  --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{team_name}' (ID {team_id}) ---")
                    
                    parse_players_from_page(
                        driver=driver,
                        wait=wait,
                        cursor=cursor,
                        conn=conn,
                        players_page_url=players_page_url,
                        tournament_id=tournament_id,
                        team_id=team_id,
                        athlete_type='teams',
                        player_table_selector=player_table_selector,
                        player_link_selector=player_link_selector,
                        player_tag_selector=player_tag_selector
                    )

            else:
                print(f"  ‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ '{tournament_type}' –¥–ª—è ID {tournament_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            
            time.sleep(2) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—É—Ä–Ω–∏—Ä–∞–º–∏

    except Exception as main_e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: {main_e}")
    finally:
        if conn:
            conn.close()
            print("\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
        if driver:
            driver.quit()
            print("‚úÖ WebDriver –∑–∞–∫—Ä—ã—Ç.")

if __name__ == "__main__":
    main()
