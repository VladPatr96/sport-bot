#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–Ω–∏-—Å–∫—Ä–∏–ø—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è PROSPORT.
‚Äî –ú—è–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã news_entities (–¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏ –∏–Ω–¥–µ–∫—Å—ã).
‚Äî –ü—Ä—è–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º (sport / tournament / team / athlete).
‚Äî –î–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤–≤–µ—Ä—Ö (athlete‚Üíteam, team|athlete‚Üítournament, tournament|team‚Üísport).
‚Äî –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–µ INSERT OR IGNORE (–º–æ–∂–Ω–æ –≥–æ–Ω—è—Ç—å —Ö–æ—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å).

–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü/–ø–æ–ª–µ–π (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ):
  - news_articles(id INTEGER PRIMARY KEY, published_at TEXT, ...)
  - tags(id INTEGER PRIMARY KEY, sport_id,tournament_id,team_id,athlete_id, type, entity_id, ...)
  - news_article_tags(news_id INTEGER, tag_id INTEGER, ...)
  - sports(id), tournaments(id, sport_id), teams(id), athletes(id, team_id)
  - team_tournaments(team_id, tournament_id, is_primary INTEGER DEFAULT 0)
  - athlete_tournaments(athlete_id, tournament_id, is_primary INTEGER DEFAULT 0)
  - news_entities(news_id INTEGER, entity_id INTEGER, confidence REAL)  -- –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∞

–ó–∞–ø—É—Å–∫:
  python categorize_articles.py --db-path ./db/prosport.db

–ê–≤—Ç–æ—Ä: –ü–†–ûSPORT.
"""

import argparse
import sqlite3
from contextlib import closing
from typing import Dict, List, Tuple


DDL_INDEXES = [
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Å–≤—è–∑–∏ (–Ω–æ–≤–æ—Å—Ç—å + —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ + id)
    """
    CREATE UNIQUE INDEX IF NOT EXISTS idx_news_entities_uniq
    ON news_entities(news_id, entity_type, entity_id);
    """,
    # –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–±–æ—Ä–∫–∏
    """
    CREATE INDEX IF NOT EXISTS idx_news_entities_news
    ON news_entities(news_id);
    """,
    """
    CREATE INDEX IF NOT EXISTS idx_news_entities_entity
    ON news_entities(entity_type, entity_id);
    """,
]

# –ë–ª–æ–∫–∏ INSERT-–æ–≤. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –¥–∞—Å—Ç —Å—á—ë—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–æ–∫.
INSERT_BLOCKS: List[Tuple[str, str]] = [
    (
        "SPORT –∏–∑ —Ç–µ–≥–æ–≤",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT nat.news_id, t.sport_id, 1.0, 'sport', 'direct:tag'
        FROM news_article_tags nat
        JOIN tags t ON t.id = nat.tag_id
        WHERE t.sport_id IS NOT NULL;
        """,
    ),
    (
        "TOURNAMENT –∏–∑ —Ç–µ–≥–æ–≤",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT nat.news_id, t.tournament_id, 1.0, 'tournament', 'direct:tag'
        FROM news_article_tags nat
        JOIN tags t ON t.id = nat.tag_id
        WHERE t.tournament_id IS NOT NULL;
        """,
    ),
    (
        "TEAM –∏–∑ —Ç–µ–≥–æ–≤",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT nat.news_id, t.team_id, 1.0, 'team', 'direct:tag'
        FROM news_article_tags nat
        JOIN tags t ON t.id = nat.tag_id
        WHERE t.team_id IS NOT NULL;
        """,
    ),
    (
        "ATHLETE –∏–∑ —Ç–µ–≥–æ–≤",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT nat.news_id, t.athlete_id, 1.0, 'athlete', 'direct:tag'
        FROM news_article_tags nat
        JOIN tags t ON t.id = nat.tag_id
        WHERE t.athlete_id IS NOT NULL;
        """,
    ),
    # –ò–µ—Ä–∞—Ä—Ö–∏—è –≤–≤–µ—Ä—Ö: athlete ‚Üí team (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Ç–µ–∫—É—â–∏–π team_id)
    (
        "ATHLETE ‚Üí TEAM",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT ne.news_id, a.team_id, 0.95, 'team', 'infer:hierarchy'
        FROM news_entities ne
        JOIN athletes a ON a.id = ne.entity_id
        WHERE ne.entity_type='athlete' AND a.team_id IS NOT NULL;
        """,
    ),
    # TEAM ‚Üí primary tournament
    (
        "TEAM ‚Üí TOURNAMENT (primary)",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT DISTINCT ne.news_id, tt.tournament_id, 0.95, 'tournament', 'infer:hierarchy'
        FROM news_entities ne
        JOIN team_tournaments tt ON tt.team_id = ne.entity_id AND tt.is_primary=1
        WHERE ne.entity_type='team';
        """,
    ),
    # ATHLETE ‚Üí primary tournament
    (
        "ATHLETE ‚Üí TOURNAMENT (primary)",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT DISTINCT ne.news_id, at.tournament_id, 0.95, 'tournament', 'infer:hierarchy'
        FROM news_entities ne
        JOIN athlete_tournaments at ON at.athlete_id = ne.entity_id AND at.is_primary=1
        WHERE ne.entity_type='athlete';
        """,
    ),
    # TOURNAMENT ‚Üí SPORT
    (
        "TOURNAMENT ‚Üí SPORT",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT DISTINCT ne.news_id, tr.sport_id, 0.95, 'sport', 'infer:hierarchy'
        FROM news_entities ne
        JOIN tournaments tr ON tr.id = ne.entity_id
        WHERE ne.entity_type='tournament' AND tr.sport_id IS NOT NULL;
        """,
    ),
    # TEAM ‚Üí SPORT (—á–µ—Ä–µ–∑ primary tournament)
    (
        "TEAM ‚Üí SPORT (—á–µ—Ä–µ–∑ primary tournament)",
        """
        INSERT OR IGNORE INTO news_entities (news_id, entity_id, confidence, entity_type, method)
        SELECT DISTINCT ne.news_id, tr.sport_id, 0.95, 'sport', 'infer:hierarchy'
        FROM news_entities ne
        JOIN team_tournaments tt ON tt.team_id = ne.entity_id AND tt.is_primary=1
        JOIN tournaments tr ON tr.id = tt.tournament_id
        WHERE ne.entity_type='team' AND tr.sport_id IS NOT NULL;
        """,
    ),
]


def column_exists(conn: sqlite3.Connection, table: str, column: str) -> bool:
    cur = conn.execute(f"PRAGMA table_info('{table.replace("'", "''")}')")
    return any(row[1] == column for row in cur.fetchall())


def ensure_migration(conn: sqlite3.Connection) -> None:
    """–ú—è–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º news_entities –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏."""
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    with conn:
        if not column_exists(conn, 'news_entities', 'entity_type'):
            conn.execute("ALTER TABLE news_entities ADD COLUMN entity_type TEXT")
        if not column_exists(conn, 'news_entities', 'method'):
            conn.execute("ALTER TABLE news_entities ADD COLUMN method TEXT")
        if not column_exists(conn, 'news_entities', 'ambiguous'):
            conn.execute("ALTER TABLE news_entities ADD COLUMN ambiguous INTEGER DEFAULT 0")
        if not column_exists(conn, 'news_entities', 'created_at'):
            # SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DEFAULT CURRENT_TIMESTAMP —Å ALTER? –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ‚Äî –æ–∫.
            conn.execute("ALTER TABLE news_entities ADD COLUMN created_at TEXT DEFAULT CURRENT_TIMESTAMP")

        for ddl in DDL_INDEXES:
            conn.execute(ddl)


def run_inserts(conn: sqlite3.Connection) -> Dict[str, int]:
    """–í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏ INSERT OR IGNORE, —Å—á–∏—Ç–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–µ–ª—å—Ç–µ total_changes."""
    stats: Dict[str, int] = {}
    for title, sql in INSERT_BLOCKS:
        before = conn.total_changes
        conn.execute("BEGIN")
        try:
            conn.executescript(sql)
            conn.execute("COMMIT")
        except Exception:
            conn.execute("ROLLBACK")
            raise
        after = conn.total_changes
        stats[title] = max(0, after - before)
    return stats


def main():
    ap = argparse.ArgumentParser(description="–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏)")
    ap.add_argument("--db-path", default="./db/prosport.db", help="–ü—É—Ç—å –¥–æ SQLite –±–∞–∑—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ./db/prosport.db)")
    args = ap.parse_args()

    with closing(sqlite3.connect(args.db_path)) as conn:
        conn.row_factory = sqlite3.Row
        conn.execute("PRAGMA foreign_keys=ON")
        conn.execute("PRAGMA journal_mode=WAL")
        conn.execute("PRAGMA synchronous=NORMAL")

        print("üóÑÔ∏è  –û—Ç–∫—Ä—ã—Ç–∞ –ë–î:", args.db_path)
        ensure_migration(conn)
        print("üß© –ú–∏–≥—Ä–∞—Ü–∏—è news_entities ‚Äî OK (–∫–æ–ª–æ–Ω–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –º–µ—Å—Ç–µ)")

        stats = run_inserts(conn)

        # –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º
        def count_by(etype: str) -> int:
            cur = conn.execute(
                "SELECT COUNT(*) FROM news_entities WHERE entity_type=?",
                (etype,),
            )
            return int(cur.fetchone()[0])

        totals = {
            'sport': count_by('sport'),
            'tournament': count_by('tournament'),
            'team': count_by('team'),
            'athlete': count_by('athlete'),
        }

        cur_news = conn.execute("SELECT COUNT(DISTINCT id) FROM news_articles")
        total_news = int(cur_news.fetchone()[0]) if cur_news.fetchone() else 0

        cur_linked = conn.execute("SELECT COUNT(DISTINCT news_id) FROM news_entities")
        news_with_links = int(cur_linked.fetchone()[0])

        print("\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        print("‚Äî –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ –ø—Ä–æ–≥–æ–Ω:")
        for k, v in stats.items():
            print(f"   ‚Ä¢ {k}: +{v}")
        print("‚Äî –ò—Ç–æ–≥–æ —Å–≤—è–∑–µ–π –≤ news_entities:")
        for k, v in totals.items():
            print(f"   ‚Ä¢ {k}: {v}")
        print(f"‚Äî –ù–æ–≤–æ—Å—Ç–µ–π –≤—Å–µ–≥–æ: {total_news}")
        print(f"‚Äî –ù–æ–≤–æ—Å—Ç–µ–π —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Å–≤—è–∑—å—é: {news_with_links}")
        coverage = (news_with_links / total_news * 100.0) if total_news else 0.0
        print(f"‚Äî –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage:.1f}%")

        print("\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å—Ç–∞–≤—å —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ backfill_m2m_and_tags –≤ –∫—Ä–æ–Ω–µ/Actions.")


if __name__ == "__main__":
    main()
