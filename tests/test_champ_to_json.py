# -*- coding: utf-8 -*-
"""
–°–æ–±—Ä–∞—Ç—å –ª–µ–Ω—Ç—É/—Å—Ç–∞—Ç—å–∏ Championat –≤ JSON (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î).

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞:
  # 1) –°–Ω—è—Ç—å 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫), —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ out/champ_list.json
  python -m scripts.test_champ_to_json --list 20 --out ./out/champ_list.json

  # 2) –°–Ω—è—Ç—å 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–Ω—Ç—ã –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—å–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ out/champ_articles.json
  python -m scripts.test_champ_to_json --limit 10 --out ./out/champ_articles.json

  # 3) –†–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ URL (–ø–æ –æ–¥–Ω–æ–º—É/–∏–∑ —Ñ–∞–π–ª–∞), —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON
  python -m scripts.test_champ_to_json --url https://www.championat.com/football/news-6165562-...
  python -m scripts.test_champ_to_json --urls-file ./urls.txt --out ./out/custom.json

  # 4) –ü–æ–º–µ–Ω—è—Ç—å —Ä–∞–∑–¥–µ–ª/—Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–µ–Ω—Ç—ã –ø–æ–≤–µ—Ä—Ö YAML
  python -m scripts.test_champ_to_json --base-url https://www.championat.com/news/football/2.html --limit 5

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ parsers/sources/championat/config/sources_config.yml ‚Üí —Å–µ–∫—Ü–∏—è "championat".
"""
import os
import sys
import yaml
import json
import asyncio
import argparse
from typing import List, Dict, Any

PROJ_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
CONFIG_PATH = os.path.join(
    PROJ_ROOT, "parsers", "sources", "championat", "config", "sources_config.yml"
)

sys.path.insert(0, PROJ_ROOT)
from parsers.sources.championat.parsers.champ_parser import ChampParserSelenium  # noqa: E402


def load_config() -> dict:
    path = os.path.abspath(CONFIG_PATH)
    with open(path, encoding="utf-8") as f:
        all_cfg = yaml.safe_load(f) or {}
    cfg = all_cfg.get("championat") or {}
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ url
    if "base_url" not in cfg and "url" in cfg:
        cfg["base_url"] = cfg["url"]
    return cfg


def save_json(data: Any, out_path: str) -> None:
    os.makedirs(os.path.dirname(os.path.abspath(out_path)) or ".", exist_ok=True)
    with open(out_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {os.path.abspath(out_path)}")


def read_urls_file(path: str) -> List[str]:
    urls: List[str] = []
    with open(path, encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            urls.append(line)
    return urls


def compact_article(art: Dict[str, Any], include_body: bool) -> Dict[str, Any]:
    body = (art.get("body") or "")
    return {
        "url": art.get("url"),
        "title": art.get("title"),
        "published": art.get("published"),
        "summary": art.get("summary"),
        "tags": art.get("tags") or [],
        "images": art.get("images") or [],
        "videos": art.get("videos") or [],
        **({"body": body} if include_body else {}),
    }


async def main():
    ap = argparse.ArgumentParser(description="Championat ‚Üí JSON (–±–µ–∑ –ë–î)")
    ap.add_argument("--list", type=int, default=0, help="–°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–Ω—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–±–µ–∑ —Å—Ç–∞—Ç–µ–π)")
    ap.add_argument("--limit", type=int, default=10, help="–°–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–∑ –ª–µ–Ω—Ç—ã (0 = –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å)")
    ap.add_argument("--url", action="append", help="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL —Å—Ç–∞—Ç—å–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)")
    ap.add_argument("--urls-file", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º URL (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)")
    ap.add_argument("--base-url", help="–ü–µ—Ä–µ–∫—Ä—ã—Ç—å base_url –∏–∑ YAML –¥–ª—è –ª–µ–Ω—Ç—ã")
    ap.add_argument("--out", default="./out/champ_dump.json", help="–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON")
    ap.add_argument("--include-body", action="store_true", help="–í–∫–ª—é—á–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç body –≤ JSON")
    args = ap.parse_args()

    cfg = load_config()
    if args.base_url:
        cfg["base_url"] = args.base_url

    result: Dict[str, Any] = {
        "config": {
            k: v for k, v in cfg.items() if k in ("base_url", "timeout", "delay")
        },
        "list": [],
        "articles": [],
    }

    # –°–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö URL
    target_urls: List[str] = []
    if args.url:
        target_urls.extend(args.url)
    if args.urls_file:
        target_urls.extend(read_urls_file(args.urls_file))

    async with ChampParserSelenium(cfg) as parser:
        if parser.driver is None:
            print("‚ùå WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Chrome ‚Üî ChromeDriver.")
            return

        # 1) –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫
        items = await parser.fetch_list()
        print(f"üì∞ –õ–µ–Ω—Ç–∞: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        if args.list > 0:
            result["list"] = items[: args.list]
            # –µ—Å–ª–∏ —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω—É–∂–Ω–æ ‚Äî —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            if not target_urls and args.limit <= 0:
                save_json(result, args.out)
                return

        # 2) –ï—Å–ª–∏ –µ—Å—Ç—å target_urls ‚Äî —Ä–∞–∑–±–∏—Ä–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
        if target_urls:
            for u in target_urls:
                meta = {"url": u, "title": None, "published": None, "summary": None}
                art = await parser.fetch_article(meta)
                if art:
                    result["articles"].append(compact_article(art, args.include_body))
            save_json(result, args.out)
            return

        # 3) –ò–Ω–∞—á–µ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ limit –∏–∑ –ª–µ–Ω—Ç—ã –∏ –ø–∞—Ä—Å–∏–º
        lim = max(0, args.limit)
        for meta in items[:lim]:
            art = await parser.fetch_article(meta)
            if art:
                result["articles"].append(compact_article(art, args.include_body))
        save_json(result, args.out)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e)
