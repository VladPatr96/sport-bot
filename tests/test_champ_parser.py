# scripts/test_champ_parser.py
# -*- coding: utf-8 -*-
import os
import sys
import yaml
import asyncio
import argparse

PROJ_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
CONFIG_PATH = os.path.join(
    PROJ_ROOT, "parsers", "sources", "championat", "config", "sources_config.yml"
)

sys.path.insert(0, PROJ_ROOT)
from parsers.sources.championat.parsers.champ_parser import ChampParserSelenium  # noqa: E402


def load_config() -> dict:
    path = os.path.abspath(CONFIG_PATH)
    with open(path, encoding="utf-8") as f:
        all_cfg = yaml.safe_load(f) or {}
    cfg = all_cfg.get("championat") or {}

    # –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª—é—á–µ–π: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ base_url, –∏ url
    if "base_url" not in cfg and "url" in cfg:
        cfg["base_url"] = cfg["url"]

    return cfg


def print_article(art: dict) -> None:
    tags = [t.get("name") or t.get("url") for t in (art.get("tags") or [])]
    body = (art.get("body") or "").strip()
    print("\n‚Äî ‚Äî ‚Äî –°–¢–ê–¢–¨–Ø ‚Äî ‚Äî ‚Äî")
    print("URL:      ", art.get("url"))
    print("Title:    ", art.get("title"))
    print("Published:", art.get("published"))
    print("Tags:     ", tags)
    print("Body:     ", (body[:800] + "‚Ä¶") if len(body) > 800 else body)


def print_list(items: list, k: int) -> None:
    k = min(k, len(items))
    print(f"\n‚Äî ‚Äî ‚Äî –ü–ï–†–í–´–ï {k} –≠–õ–ï–ú–ï–ù–¢–û–í –õ–ï–ù–¢–´ ‚Äî ‚Äî ‚Äî")
    for i in range(k):
        it = items[i]
        print(f"[{i}] {it.get('published')} ‚Äî {it.get('title')}\n    {it.get('url')}")


async def main():
    ap = argparse.ArgumentParser(description="–¢–µ—Å—Ç Championat-–ø–∞—Ä—Å–µ—Ä–∞")
    ap.add_argument("--url", help="–°–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ URL")
    ap.add_argument("--n", type=int, default=0, help="–ò–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ª–µ–Ω—Ç—ã (0 = –ø–µ—Ä–≤–∞—è)")
    ap.add_argument("--list", type=int, default=0, help="–í—ã–≤–µ—Å—Ç–∏ K —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–Ω—Ç—ã –∏ –≤—ã–π—Ç–∏")
    ap.add_argument("--base-url", dest="base_url", help="–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å base_url –∏–∑ YAML")
    args = ap.parse_args()

    cfg = load_config()
    if args.base_url:
        cfg["base_url"] = args.base_url

    resolved_url = cfg.get("base_url")
    print("üìÑ CONFIG:", os.path.abspath(CONFIG_PATH))
    print("üîë KEYS:", ", ".join(sorted(cfg.keys())))
    print("üåê RESOLVED BASE URL:", resolved_url)

    async with ChampParserSelenium(cfg) as parser:
        if parser.driver is None:
            print("‚ùå WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Chrome ‚Üî ChromeDriver.")
            return

        if args.url:
            meta = {"url": args.url, "title": None, "published": None, "summary": None}
            art = await parser.fetch_article(meta)
            if not art:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ URL.")
                return
            print_article(art)
            return

        items = await parser.fetch_list()
        print(f"üì∞ –í —Å–ø–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
        if not items:
            print("‚ÑπÔ∏è –ü–æ—Ö–æ–∂–µ, —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å base_url (–∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π --base-url).")
            return

        if args.list > 0:
            print_list(items, args.list)
            return

        idx = max(0, min(args.n, len(items) - 1))
        chosen = items[idx]
        print("‚û°Ô∏è  –í—ã–±—Ä–∞–Ω–æ –∏–∑ –ª–µ–Ω—Ç—ã:")
        print("    URL:   ", chosen.get("url"))
        print("    Title: ", chosen.get("title"))
        print("    Date:  ", chosen.get("published"))

        art = await parser.fetch_article(chosen)
        if not art:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é.")
            return
        print_article(art)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:", e)
