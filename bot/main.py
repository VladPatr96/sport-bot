import os
import asyncio
import logging
import requests
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.error import TelegramError
from parsers.champ_parser import ChampParser
import yaml

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN    = os.environ["BOT_TOKEN"]
CHAT_ID      = os.environ["CHAT_ID"]
WEBAPP_BASE  = os.environ["WEBAPP_BASE"].rstrip("/")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä–∞
bot    = Bot(token=BOT_TOKEN)
cfg    = yaml.safe_load(open("sources_config.yml", encoding="utf-8"))["championat"]
parser = ChampParser(cfg)

# –§–æ–ª–±—ç–∫-–∫–∞—Ä—Ç–∏–Ω–∫–∞
fallback_image = f"{WEBAPP_BASE}/logo.png"

def proxify_image(url: str) -> str:
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π URL —á–µ—Ä–µ–∑ images.weserv.nl –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å fallback."""
    if not url:
        return fallback_image
    clean = url.replace("https://", "").replace("http://", "")
    return f"https://images.weserv.nl/?url={clean}"

def is_page_available(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ GitHub Pages."""
    try:
        resp = requests.head(url, timeout=5)
        return resp.status_code == 200
    except Exception as e:
        logger.warning(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å URL {url}: {e}")
        return False

async def send_article(article: dict):
    # slug –∏–∑ URL
    raw  = article["url"].rstrip("/").split("/")[-1]
    slug = raw.removesuffix(".html") + ".html"
    wa_url = f"{WEBAPP_BASE}/{slug}"
    logger.info(f"[DEBUG] wa_url = {wa_url}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if not is_page_available(wa_url):
        logger.warning(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—å—é: {wa_url} –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    # –ü—Ä–æ–∫—Å–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞
    img_src = article["images"][0] if article["images"] else None
    photo_url = proxify_image(img_src) if img_src else fallback_image
    logger.info(f"[DEBUG] photo_url = {photo_url}")

    # –û–±—Ä–µ–∑–∫–∞ summary
    summary = article["summary"]
    if len(summary) > 300:
        summary = summary[:297] + "..."

    # –°–æ–æ–±—â–µ–Ω–∏–µ
    caption = f"üèÜ <b>{article['title']}</b>\n\n{summary}"
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", web_app=WebAppInfo(url=wa_url))
    ]])

    try:
        await bot.send_photo(
            chat_id=CHAT_ID,
            photo=photo_url,
            caption=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {article['title']}")
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

async def main():
    metas = parser.fetch_list()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(metas)}")
    for meta in metas:
        article = parser.fetch_article(meta)
        logger.debug(f"[DEBUG] –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article['title']}")
        await send_article(article)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"[FATAL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        exit(1)
