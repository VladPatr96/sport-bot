import os
import asyncio
import logging
import requests
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from utils.render import render_preview  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
from parsers.champ_parser import ChampParser
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ["BOT_TOKEN"]
CHAT_ID = os.environ["CHAT_ID"]
WEBAPP_BASE = os.environ["WEBAPP_BASE"]

# Telegram Bot
bot = Bot(token=BOT_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
cfg = yaml.safe_load(open("sources_config.yml"))["championat"]
parser = ChampParser(cfg)

# –§–æ–ª–±—ç–∫-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏
fallback_image = "https://www.championat.com/static/i/svg/logo.svg"

async def send_article(bot, article):
    slug = article["url"].rstrip("/").split("/")[-1]
    if not slug.endswith(".html"):
        slug += ".html"
    wa_url = f"{WEBAPP_BASE}/{slug}"

    # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    main_image = article["images"][0] if article["images"] else fallback_image

    # –ü—Ä–µ–≤—å—é
    caption = f"üèÜ <b>{article['title']}</b>\n\n{article['summary']}"

    # –ö–Ω–æ–ø–∫–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", web_app=WebAppInfo(url=wa_url))]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞
    await bot.send_photo(
        chat_id=CHAT_ID,
        photo=main_image,
        caption=caption,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {article['title']}")

async def main():
    articles = parser.fetch_list()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")

    for meta in articles[:1]:  # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å [:1], —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ
        article = parser.fetch_article(meta)
        await send_article(bot, article)

if __name__ == "__main__":
    asyncio.run(main())
